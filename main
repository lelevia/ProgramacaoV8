from hub import port, motion_sensor, button, light_matrix
import motor
import motor_pair
import runloop

motor_pair.pair(motor_pair.PAIR_1, port.E, port.F)


def conversao (cm):
    y = (360*cm)/17.5
    return y


async def mover(distanciaCM, velocidade, kp):
    distancia = conversao(distanciaCM)
    motion_sensor.reset_yaw(0)
    motor.reset_relative_position(port.E, 0)
    while (abs(motor.relative_position(port.E))<distancia):
        erro = (0 - motion_sensor.tilt_angles()[0])
        correcao = erro*kp
        motor_pair.move_tank(motor_pair.PAIR_1, round(velocidade-correcao), round(velocidade+correcao))
    motor_pair.stop(motor_pair.PAIR_1)

async def mover_original (distanciaCM, velocidade, aceleracao):
    distancia = conversao(distanciaCM)
    motor.reset_relative_position(port.B, 0)
    while (abs(motor.relative_position(port.B))<distancia):
        motor_pair.move_tank(motor_pair.PAIR_1, velocidade, velocidade, acceleration=aceleracao)
    motor_pair.stop(motor_pair.PAIR_1)

async def curva(angulo, kp, vm):
    motion_sensor.reset_yaw(0)
    #await time(0.5)
    erro = angulo - motion_sensor.tilt_angles()[0]
    integral = 0

    while (erro != 0):
        erro = angulo - motion_sensor.tilt_angles()[0]
        correcao = (erro*kp)
        if abs(correcao) <vm:
            if (correcao)>0: correcao=vm
            if (correcao)<0: correcao=-vm
        if integral>3000:integral = 3000
        motor_pair.move_tank(motor_pair.PAIR_1, round(correcao*-1), round(correcao))
    motor_pair.stop(motor_pair.PAIR_1)

async def motorindA(angulo, velocidade):
    motor.reset_relative_position(port.A, 0)
    while abs(motor.relative_position(port.A))<abs(angulo):
        motor.run(port.A, velocidade)
    motor.stop(port.A)

async def motorindB(angulo, velocidade):
    motor.reset_relative_position(port.B, 0)
    while abs(motor.relative_position(port.B))<abs(angulo):
        motor.run(port.B, velocidade)
    motor.stop(port.B)

async def time (tempo):
    i = 0
    for i in range (tempo+1):
        await runloop.sleep_ms(1000)

async def start1():
    await mover(53, -500, 1) #sai da base em direção ao berçario
    motor.run_for_degrees(port.B, 970, 700) #levanta o berçario
    await time(0.2) #da um intervalo
    await motor.run_for_degrees(port.B,200,-600) #baixa a cremalheira
    await motorindA(950, 1080) #pega o mergulhador e faz a parte de baixo
    await time(0.2) #da um intervalo
    await mover(9, 200, 1) #sai da missão
    await curva(-460, 0.2,50) #faz uma curva e coleta as amostras
    await mover(53, 1100, 1) #volta pra base

async def start2(): #kraken
    await mover(35,-500,1) #Sai da zona
    await curva(-300,0.6,0) #faz curva de ajuste
    await mover(24,-400,1) #Andar pra frente
    await curva(-620, 0.45, 0) #faz outra curva
    await mover(22,-200,1) #Pega o baú e levanta o mastro
    await mover(17,300,1) #Sai com o baú
    await curva(400, 0.6, 0) #vira na reta da coleta
    motor.run_for_degrees(port.B, 1100, -1000) #baixa a garra em mov
    await mover(10, -400, 1) #anda reto
    motor.run_for_degrees(port.A,-300,900)
    await mover (23.5,-400,1)
    await mover(6, -350, 1) #anda reto
    await motorindB(600, 1100) #levanta a garra
    await motorindA(300, 700) #recolhe o braço
    await motor_pair.move_tank_for_degrees(motor_pair.PAIR_1,2300,1100,1100) #volta pra base


async def start3(): #trident
    await mover(45, -400, 1)
    await curvaD(450, 0.5, 0)
    '''await motorindB(600, -200)
    await mover(28, 200, 1)
    await motor_pair.move_tank_for_degrees(motor_pair.PAIR_1,1250,900, 650)'''
#async def start4(): #travessia

async def start5(): #banana
    await mover(55,-500,1)#sai da base
    await mover(13,400,1)#retira o coral
    await curva(-475,0.5,0)#vira pro barco
    await mover(6.2,-100,1)#levanta relativamente
    await motorindB(1200,800)#gira o barco
    motor.run_for_degrees(port.B, 180, -800)#volta a pa
    await curva(415,0.55,0)#vai em direção as coletas e amostras
    await mover(16,-500,1)#avança
    await motorindA(700, 900)#pega a amostras
    await motorindB(770, 900)#pega as coletas
    await mover(10, 1100, 1)#volta pra base
    await motor_pair.move_tank_for_degrees(motor_pair.PAIR_1,1300,850,1050)#volta pra base

async def start6(): #sonar
    await mover (30, -500,0.5)#sai da base
    await curva(390,0.6,0)#vira em direção ao sonar
    await mover (56.5,-700,1)#anda em direção ao sonar
    await motorindB(2000,800)#gira o motor B e faz o sonar
    await mover(35,450,1)#volta sentido criatura desconhecida
    await curva(-900,0.9,0) #faz um curva
    await mover(7,1000,0) #da a ré na frente do polvo
    await curva(-900,0.9,0) #vira a traseira pro polvo
    await mover(8,1000,0) #coleta o polvo
    await mover(38,-1100,0)#volta pra base

async def start7():
    await mover(70,-400,1)#sai da base
    await curva(-430,0.4,0)#faz uma curva na baleia
    await mover(8,-120,1)#bate na parte de baixo da baleia e entrega os krills
    await time(0.7)#da um intervalo
    await mover(7.5,250,1)#sai da baleia
    await curva(-220,0.4,0)#faz uma curva perto da m14
    await mover(3.5,200,1)#sai da linha da coleta(m14)
    await curva(-300,0.4,0)#completa a curva
    await motorindA(50,100)#abaixa a cremaleira
    await mover(48,450,1)#vai na missão compartilhada
    
    await curva(-450,0.4,0)#faz uma curva na compartilhada
    await mover (15,200,1) #da ré
    await motorindB(1200,800)#girar o submarino


starts = [start1, start2, start3,'''start4''',start5, start6, start7]
indice_atual = 2

async def mudar():
    global indice_atual
    while True:
            if button.pressed(button.RIGHT) or button.pressed(button.LEFT):
                if indice_atual < len(starts):
                    await starts[indice_atual]()
                    indice_atual += 1
                    await time(3)

async def curvaD(angulo, kp, ki):
    integral = 0
    motion_sensor.reset_yaw(0)
    while (abs(angulo)-10)>abs(motion_sensor.tilt_angles()[0]):
        erro = abs(angulo) - abs(motion_sensor.tilt_angles()[0])
        integral = integral = erro
        if integral>0:
            integral=0
        correcao = (erro*kp)+(erro*ki)

        motor_pair.move_tank(motor_pair.PAIR_1, round(correcao), round(correcao*-1))
    motor_pair.stop(motor_pair.PAIR_1)
#função principal:

'''async def curvapyt(angulo, kp, ki):
    integral = 0
    motion_sensor.reset_yaw(0)
    while abs(angulo)>abs(motion_sensor.tilt_angles()[0]-85):
        erro = angulo - motion_sensor.tilt_angles()[0]
        integral = integral + erro
        if (integral>1200):
            integral = 1200
        correcao = (erro * kp)+(integral*ki)
        motor_pair.move_tank(motor_pair.PAIR_1, round(correcao), round(correcao*-1))
    motor_pair.stop(motor_pair.PAIR_1)'''
    


async def main():
    '''while indice_atual < len(starts):
        light_matrix.write(">")

        await mudar()
        await time(3)'''
    await mover(50, 600, 1)
    await mover(40, 200, 1)
    #await curvaD(-900, 0.5, 0.02)
runloop.run(main())

