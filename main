from hub import port, motion_sensor, button, light_matrix
import motor
import motor_pair
import runloop

motor_pair.pair(motor_pair.PAIR_1, port.E, port.F)


def conversao (cm):
    y = (360*cm)/17.5
    return y

async def giroAz(angulo, kp):
    # Recupera o valor atual do sensor de giroscópio em decigraus
    angulo_atual = motion_sensor.tilt_angles()[0]

    # Função para ajustar o ângulo para o intervalo [-1790, 1790]
    def ajustar_angulo(angulo):
        # Corrige o valor do ângulo para estar sempre dentro do intervalo [-1790, 1790]
        if angulo > 1790:
            angulo -= 3580# Se ultrapassar 1790, retorna para o intervalo negativo
        elif angulo < -1790:
            angulo += 3580# Se ultrapassar -1790, retorna para o intervalo positivo
        return angulo

    # Ajusta os ângulos de destino para o intervalo [-1790, 1790]
    angulo_desejado = ajustar_angulo(angulo)
    angulo_atual = ajustar_angulo(angulo_atual)
    integral = 0

    # Determina a direção de rotação (sentido horário ou anti-horário)
    while abs(angulo_desejado - angulo_atual) > 0:# Um valor pequeno para precisão
        erro = angulo_desejado - angulo_atual
        correcao = (erro * kp)
        motor_pair.move_tank(motor_pair.PAIR_1, round(correcao * -1), round(correcao))
        angulo_atual = ajustar_angulo(motion_sensor.tilt_angles()[0])# Atualiza o ângulo atual

    motor_pair.stop(motor_pair.PAIR_1)



async def moverAz(distancia,velocidade, kp, referencia, aceleracao, kp_curva):
    def conversor(distancia):
        graus_motor=(distancia*360)/17.5
        return graus_motor

    motor.reset_relative_position(port.E,0)
    distancia_total = conversor(distancia)

    def ajustar_angulo(angulo):
        # Corrige o valor do ângulo para estar sempre dentro do intervalo [-1790, 1790]
        if angulo > 1790:
            angulo -= 3580# Se ultrapassar 1790, retorna para o intervalo negativo
        elif angulo < -1790:
            angulo += 3580# Se ultrapassar -1790, retorna para o intervalo positivo
        return angulo

    angulo_atual = ajustar_angulo(motion_sensor.tilt_angles()[0])
    erro_angulo = referencia-angulo_atual

    print (erro_angulo)

    if abs(erro_angulo)>10:
        await giroAz(referencia, kp_curva)
        while distancia_total>abs(motor.relative_position(port.E)):
            erro = referencia - motion_sensor.tilt_angles()[0]
            correcao = erro * kp
            motor_pair.move(motor_pair.PAIR_1, round(correcao*-1), velocity=velocidade, acceleration=aceleracao)
        motor_pair.stop(motor_pair.PAIR_1)

    else:
        while distancia_total>abs(motor.relative_position(port.E)):
            erro = referencia - motion_sensor.tilt_angles()[0]
            correcao = erro * kp
            motor_pair.move(motor_pair.PAIR_1, round(correcao*-1), velocity=velocidade, acceleration=aceleracao)
        motor_pair.stop(motor_pair.PAIR_1)


async def motorindA(angulo, velocidade):
    motor.reset_relative_position(port.A, 0)
    while abs(motor.relative_position(port.A))<abs(angulo):
        motor.run(port.A, velocidade)
    motor.stop(port.A)

async def motorindB(angulo, velocidade):
    motor.reset_relative_position(port.B, 0)
    while abs(motor.relative_position(port.B))<abs(angulo):
        motor.run(port.B, velocidade)
    motor.stop(port.B)

async def time (tempo):
    i = 0
    for i in range (tempo+1):
        await runloop.sleep_ms(1000)


async def start1():
    await moverAz(52.4, 550, 0.4, 0, 2000,0.9) #sai da base em direção ao berçario
    await motor.run_for_degrees(port.B, 970, 700) #levanta o berçario
    await motor.run_for_degrees(port.B,550,-600) #baixa a cremalheira
    await motorindA(1200, 1080) #pega o mergulhador e faz a parte de baixo
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,200,0,velocity=-200)
    await giroAz(-460, 0.8) #faz uma curva e coleta as amostras
    await motor_pair.move_tank_for_degrees(motor_pair.PAIR_1, -1650, 900, 1050)
    #await moverAz(53, -1100, 0, -460, 5000,0.9) #volta pra base

async def start2(): #kraken

    #novo kraken
    await moverAz(38,500,0.5, 0, 5000,0.9) #Sai da zona
    #await giroAz(-460,0.45)
    await moverAz(40,600,0.5, -490, 3000,0.9)
    motor.run_for_degrees(port.A,-300,900)
    await moverAz(35, 500, 0.5, -490, 2000, 1)
    await motorindA(300, 900)
    await motorindB(700, 1100)
    await moverAz(44, -400, 0, -530, 5000, 1)
    await moverAz(20, 200, 0.2, -900, 2000, 0.5)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,320,0,velocity=-300)
    await moverAz(70, -1000, 0, -380, 10000, 0.7)


async def start3(): #trident
    await moverAz(52, 500, 0.3, 0, 5000,0.7)
    await giroAz(500, 0.64)
    await moverAz(17, 400, 0, 500, 2000,0.9)
    await motor.run_for_degrees(port.B, 400, -500)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1, 340, 0, velocity=-100)
    await motor.run_for_degrees(port.B, 900, -500)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1, 100, 0, velocity=150)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1, 170, 0, velocity=-150)
    await giroAz(100, 1.5)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1, 1600, 0, velocity=-1000)



async def start4(): #travessia
    await moverAz(91, 650, 0.9, 0, 2000,0.5)
    await motorindA(800, -500)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1, 400, 0, velocity=-400)
    await motorindA(800, 900)
    #await motor_pair.move_for_degrees(motor_pair.PAIR_1, 600, 0, velocity=-900)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1, 300, 0, velocity=-1110)
    motor.run_for_degrees(port.B, 400, -900)
    #await moverAz(65, -650, 0.5, -100, 2000,0.5)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1, 1300, 0, velocity=-1110)


async def startbaseaz():
    await moverAz(137, 1110, 0.3, 0, 10000, 0)
    await giroAz(-550, 0.5)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1, 600, 0, velocity=-500)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1, 800, 0, velocity=900)
    '''await moverAz(20, -400, 0, -450, 2000, 0.5)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1, 450, 0, velocity=1110)'''

async def start5(): #banana
    await moverAz(39,500,0, 0, 2000,0.75)#sai da base
    await giroAz(-475,0.75)#vira pro barco
    await moverAz(4.5,150,0, -475, 2000,0.7)#levanta relativamente
    await motorindB(1600,900)#gira o barco
    await moverAz(10,-200,0,-475,800,0.7)
    await giroAz(-180,0.75)#vai em direção as coletas e amostras
    motor.run_for_degrees(port.B, 800, -900)
    await moverAz(28,500,0.35, -180, 2000,0.75)#avança
    await motorindB(700,900)
    await motorindA(600, 900)
    #await moverAz(10,-600,0.35,-180,2000,0.35)
    await motor_pair.move_tank_for_degrees(motor_pair.PAIR_1,-1600, 1050,750)


async def start6(): #sonar
    await moverAz (34, 600,0, 0, 2000,0.9)#sai da base
    await giroAz(400,0.7)#vira em direção ao sonar
    await moverAz(50,700,0, 400, 2000,0.9)#anda em direção ao sonar
    await motorindB(1800,900)#gira o motor B e faz o sonar
    await moverAz(52,-700,0, 390, 2000,0.9)#anda em direção ao sonar
    await moverAz(15,700,0, 730, 2000,0.9)

    await motor_pair.move_tank_for_degrees(motor_pair.PAIR_1, -1650, 900, 1050)

async def start7():
    await moverAz(62.6, 550,0, 0, 2000,0)#sai da base
    await giroAz(-350, 0.55)#faz um giro na baleia
    await moverAz(12.6, 200, 0,-350,2000,0.9)#ativa o gatilho
    await motor_pair.move_tank_for_degrees(motor_pair.PAIR_1,-360, 500,500)#faz um ré na baleia
    await moverAz(55, -600, 0, -900,2000,0.9)#vai em direção a compartilhada na posição 90 graus para a direita
    await moverAz(8, 500, 0, -550, 2000,0.9)#Vai sentido sonar em 55 graus a direita
    await giroAz(-1350, 0.75)#faz um giro para a posição 135 graus para a direita no sonar
    await moverAz(15.4, -500, 0, -1350,2000,0.9)#se alinha na compartilhada
    await motorindB(1000,900)#faz a missão compartilhada
    await moverAz(7, 600, 0, -1350, 2000,0.9)#sai da compartilhada
    await moverAz(48, -600, 0, -700, 2000,0.9)#anda em direção ao peixe pescador
    await moverAz(12.5, 600, 0, -900, 2000,1)#deixa o polvo

starts = [start1, start2, start3,start4,startbaseaz,start5,start6,start7]
indice_atual = 4

async def statemachine():
    global indice_atual
    while True:
            if button.pressed(button.RIGHT) or button.pressed(button.LEFT):
                motion_sensor.reset_yaw(0)
                if indice_atual < len(starts):
                    await starts[indice_atual]()
                    indice_atual += 1

async def main():
    while indice_atual < len(starts):
        light_matrix.write(">")

        await statemachine()


runloop.run(main())
