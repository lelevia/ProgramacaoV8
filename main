from hub import port, motion_sensor, button
import motor
import motor_pair
import runloop

motor_pair.pair(motor_pair.PAIR_1, port.E, port.F)








def conversao (cm):
    y = (360*cm)/17.5
    return y


async def mover(distanciaCM, velocidade, kp):
    distancia = conversao(distanciaCM)
    motion_sensor.reset_yaw(0)
    motor.reset_relative_position(port.E, 0)
    while (abs(motor.relative_position(port.E))<distancia):
        erro = (0 - motion_sensor.tilt_angles()[0])
        correcao = erro*kp
        motor_pair.move_tank(motor_pair.PAIR_1, round(velocidade-correcao), round(velocidade+correcao))
    motor_pair.stop(motor_pair.PAIR_1)

async def mover_original (distanciaCM, velocidade, aceleracao):
    distancia = conversao(distanciaCM)
    motor.reset_relative_position(port.B, 0)
    while (abs(motor.relative_position(port.B))<distancia):
        motor_pair.move_tank(motor_pair.PAIR_1, velocidade, velocidade, acceleration=aceleracao)
    motor_pair.stop(motor_pair.PAIR_1)

async def curva(angulo, kp):
    motion_sensor.reset_yaw(0)
    #await time(0.5)
    erro = angulo - motion_sensor.tilt_angles()[0]
    integral = 0

    while (erro != 0):
        erro = angulo - motion_sensor.tilt_angles()[0]
        correcao = (erro*kp)
        if integral>3000:integral = 3000
        motor_pair.move_tank(motor_pair.PAIR_1, round(correcao*-1), round(correcao))
    motor_pair.stop(motor_pair.PAIR_1)

async def motorindA(angulo, velocidade):
    motor.reset_relative_position(port.A, 0)
    while abs(motor.relative_position(port.A))<abs(angulo):
        motor.run(port.A, velocidade)
    motor.stop(port.A)

async def motorindB(angulo, velocidade):
    motor.reset_relative_position(port.B, 0)
    while abs(motor.relative_position(port.B))<abs(angulo):
        motor.run(port.B, velocidade)
    motor.stop(port.B)

async def time (tempo):
    i = 0
    for i in range (tempo+1):
        await runloop.sleep_ms(1000)

def is_time():
    return

async def start1():
    await mover(53, -500, 1) # andando pra frente
    motor.run_for_degrees(port.B, 970, 700)
    await time(0.2)
    await motorindA(950, 1080)
    await time(0.2)
    #motor.run_for_degrees(port.B, 350, -1100)
    #await time(0.2)
    await mover(9, 200, 1)
    await curva(-460, 0.4)
    await mover(53, 1100, 1)

async def start2():
    await mover(35,-600,1) #Sai da zona
    await curva(-300,0.6) #faz curva de ajuste
    #motion_sensor.reset_yaw(0)
    await mover(20,-400,1) #Andar pra frente
    await curva(-610, 0.45) #faz outra curva
    await mover(12.2,-100,1) #Pega o baú e levanta o mastro
    await time(1) #espera 1 segundo
    await motorindA(2800, 1110) #move a cremalheira
    #await motorindB(220,-1000) #abaixar braço
    #await motorindA(3000,1100) #Entrega mergulhador
    await time(1) #espera 1 segundo
    await mover(9.5,300,1) #Sai com o baú
    await motorindA(1000, 1100)
    await curva(425, 0.6) #vira na reta da coleta
    motor.run_for_degrees(port.B, -700, 500) #baixa a garra em mov

    await mover(39, -600, 1) #anda reto
    await motorindB(400, 1100) #levanta a garra
    await mover(140, 1050, 1)

async def start3():
    await mover(55,-500,1)#sai da base
    await mover(11,450,1)#retira o coral
    await curva(-490,0.5)#vira pro barco
    await mover(5.5,-300,1)#levanta relativamente
    await motorindB(1100,800)#gira o barco
    motor.run_for_degrees(port.B, 100, -800)#volta a pa
    await time(0.4)

    await curva(415,0.55)#vai em direção as coletas e amostras
    await mover(24,-500,1)#avança

    await mover(7, 500, 1)#volta
    await motorindA(700, 900)#pega a amostras

    #await mover(5, 350, 1)
    await motorindB(770, 900)#pega as coletas
    await curva(160, 0.55)#vira pra base

    await mover(65, 1100, 1)#volta pra base








starts = [start1, start2, start3, '''start4, start5, start6, start7''']
indice_atual = 0

async def mudar():
    global indice_atual
    while True:
            if button.pressed(button.RIGHT) or button.pressed(button.LEFT):
                if indice_atual < len(starts):
                    await starts[indice_atual]()
                    indice_atual += 1
                    await time(3)






#função principal:

async def main():

    '''await mover(59, -900, 1)
    await mover(59, 900, 1)'''

    while indice_atual < len(starts):
        await mudar()
        await time(3)




    '''await mover(53, -500, 1) # andando pra frente
    motor.run_for_degrees(port.B, 970, 700)
    await time(0.2)
    await motorindA(950, 1080)
    await time(0.2)
    #motor.run_for_degrees(port.B, 350, -1100)
    #await time(0.2)
    await mover(9, 200, 1)
    await curva(-460, 0.4)
    await mover(53, 1100, 1)'''

    #kraken
    #await motorindA(50, -100) #move a cremalheira
    '''await mover(35,-600,1) #Sai da zona
    await curva(-300,0.6) #faz curva de ajuste
    #motion_sensor.reset_yaw(0)
    await mover(20,-400,1) #Andar pra frente
    await curva(-610, 0.45) #faz outra curva
    await mover(12.2,-200,1) #Pega o baú e levanta o mastro
    await time(1) #espera 1 segundo
    await motorindA(2800, 1110) #move a cremalheira
    #await motorindB(220,-1000) #abaixar braço
    #await motorindA(3000,1100) #Entrega mergulhador
    await time(1) #espera 1 segundo
    await mover(9.5,300,1) #Sai com o baú
    await motorindA(1000, 1100)
    await curva(425, 0.6) #vira na reta da coleta
    motor.run_for_degrees(port.B, -700, 500) #baixa a garra em mov

    await mover(39, -600, 1) #anda reto
    await motorindB(400, 1100) #levanta a garra
    await mover(140, 1050, 1)'''



#Levantar navio de pesquisa'''

    '''await mover(55,-600,1)#sai da base
    await mover(11.5,500,1)#retira o coral
    await curva(-490,0.5)#vira pro barco
    await mover(5.5,-300,1)#levanta relativamente
    await motorindB(1100,800)#gira o barco
    motor.run_for_degrees(port.B, 100, -800)#volta a pa
    await time(0.4)

    await curva(415,0.55)#vai em direção as coletas e amostras
    await mover(24,-600,1)#avança 

    await mover(7, 600, 1)#volta
    await motorindA(700, 900)#pega a amostras

    #await mover(5, 350, 1)
    await motorindB(770, 900)#pega as coletas
    await curva(160, 0.55)#vira pra base

    await mover(65, 1100, 1)#volta pra base'''





runloop.run(main())
