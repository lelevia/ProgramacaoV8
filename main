from hub import port, motion_sensor, button, light_matrix
import motor
import motor_pair
import runloop

motor_pair.pair(motor_pair.PAIR_1, port.E, port.F)
#motor_pair.pair(motor_pair.PAIR_2, port.F, port.E)


def conversao (cm):
    y = (360*cm)/17.5
    return y

async def giroAz(angulo, kp, ki):
    # Recupera o valor atual do sensor de giroscópio em decigraus
    angulo_atual = motion_sensor.tilt_angles()[0]

    # Função para ajustar o ângulo para o intervalo [-1790, 1790]
    def ajustar_angulo(angulo):
        # Corrige o valor do ângulo para estar sempre dentro do intervalo [-1790, 1790]
        if angulo > 1790:
            angulo -= 3580# Se ultrapassar 1790, retorna para o intervalo negativo
        elif angulo < -1790:
            angulo += 3580# Se ultrapassar -1790, retorna para o intervalo positivo
        return angulo

    # Ajusta os ângulos de destino para o intervalo [-1790, 1790]
    angulo_desejado = ajustar_angulo(angulo)
    angulo_atual = ajustar_angulo(angulo_atual)
    integral = 0
    last_erro = 0

    kd = 0 #KD FIXO DO MOVIMENTO

    # Determina a direção de rotação (sentido horário ou anti-horário)
    while abs(angulo_desejado - angulo_atual) > 0:# Um valor pequeno para precisão
        erro = angulo_desejado - angulo_atual
        integral = integral + erro
        derivativa = last_erro - erro
        correcao = (erro * kp)+(integral*ki)+(kd * derivativa)
        motor_pair.move_tank(motor_pair.PAIR_1, round(correcao * -1), round(correcao))
        angulo_atual = ajustar_angulo(motion_sensor.tilt_angles()[0])# Atualiza o ângulo atual
        if integral>100:
            integral = 100

    motor_pair.stop(motor_pair.PAIR_1)



async def moverAz(distancia,velocidade, kp, ki, referencia, aceleracao, kp_curva):
    def conversor(distancia):
        graus_motor=(distancia*360)/17.5
        return graus_motor

    motor.reset_relative_position(port.E,0)
    distancia_total = conversor(distancia)

    def ajustar_angulo(angulo):
        # Corrige o valor do ângulo para estar sempre dentro do intervalo [-1790, 1790]
        if angulo > 1790:
            angulo -= 3580# Se ultrapassar 1790, retorna para o intervalo negativo
        elif angulo < -1790:
            angulo += 3580# Se ultrapassar -1790, retorna para o intervalo positivo
        return angulo

    angulo_atual = ajustar_angulo(motion_sensor.tilt_angles()[0])
    erro_angulo = referencia-angulo_atual
    integral = 0
    last_erro = 0

    kd = 0 #KD FIXO DO MOVIMENTO

    print (erro_angulo)
    if abs(erro_angulo)>10:
        await giroAz(referencia, kp_curva, ki)
        while distancia_total>abs(motor.relative_position(port.E)):
            erro = referencia - motion_sensor.tilt_angles()[0]
            integral = integral + erro
            derivativa = last_erro - erro
            correcao = (erro * kp)+(integral*ki)+(kd * derivativa)
            motor_pair.move(motor_pair.PAIR_1, round(correcao*-1), velocity=velocidade, acceleration=aceleracao)
        motor_pair.stop(motor_pair.PAIR_1)

    else:
        while distancia_total>abs(motor.relative_position(port.E)):
            erro = referencia - motion_sensor.tilt_angles()[0]
            integral = integral + erro
            derivativa = last_erro - erro
            correcao = (erro * kp)+(integral*ki)+(kd * derivativa)
            motor_pair.move(motor_pair.PAIR_1, round(correcao*-1), velocity=velocidade, acceleration=aceleracao)
        motor_pair.stop(motor_pair.PAIR_1)


async def motorindA(angulo, velocidade):
    motor.reset_relative_position(port.A, 0)
    while abs(motor.relative_position(port.A))<abs(angulo):
        motor.run(port.A, velocidade)
    motor.stop(port.A)

async def motorindB(angulo, velocidade):
    motor.reset_relative_position(port.B, 0)
    while abs(motor.relative_position(port.B))<abs(angulo):
        motor.run(port.B, velocidade)
    motor.stop(port.B)

async def time (tempo):
    i = 0
    for i in range (tempo+1):
        await runloop.sleep_ms(1000)

'''async def starttest():
    #await moverAz(32, 800, 0.35, 0.000002, 0, 5000, 0)
    await giroAz(900, 0.3, 0.0007)
    #await moverAz(100, 800, 0.35, 0.000002, 0, 5000, 0)'''


async def startini():
    await moverAz(27, 800, 0, 0, 0, 2000, 0)
    #await time(0.02)
    await giroAz(400, 0.6, 0.000002)
    await moverAz(38, 600, 0, 0, 400, 2000, 0.7)
    await giroAz(0, 0.55, 0.000002)
    await moverAz(13, 500, 0, 0, 0, 5000, 0)
    await motorindB(900, 1500)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1, 180, 0, velocity=-100)
    #await moverAz(8, -500, -0, 0, 0, 2000, 0)
    await giroAz(700, 0.55, 0.00002)
    await moverAz(55, 700, 0.55, 0.000002, 700, 5000, 0)
    await motorindA(150, 900)
    await giroAz(1150, 0.65, 0.000003)
    await moverAz(35, 700, 0, 0, 1150, 5000, 0)
    await giroAz(1500, 0.65, 0.000003)
    await moverAz(74, 1100, 0, 0, 1500, 10000, 0)
    #await giroAz(1550, 0.6, 0.000003)
    #await moverAz(57, 1100, 0, 0, 1500, 10000, 0)
    #await motor_pair.move_for_degrees(motor_pair.PAIR_1,1300,0,acceleration=10000,velocity=1100)


async def start1():
    await moverAz(50.2, 500, 0.4,0, 0, 2000,0.9) #sai da base em direção ao berçario
    await moverAz(4, 300, 0.4,0, 0, 3000,0.9) #sai da base em direção ao berçario
    await motor.run_for_degrees(port.B, 1100, 700) #levanta o berçario
    #await moverAz(4, -600, 0.4,0, 0, 3000,0.9)
    motor.run_for_degrees(port.B,200,-1100) #baixa a cremalheira
    await motorindA(1350, 1080) #pega o mergulhador e faz a parte de baixo
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,900,0,velocity=-1000)
    #await giroAz(-400, 0.55, 0.000002) #faz uma curva e coleta as amostras
    await motor_pair.move_tank_for_degrees(motor_pair.PAIR_1, 1100,-1050,280)
    #await moverAz(53, -1100, 0, -460, 5000,0.9) #volta pra base

async def start2(): #kraken

    #novo kraken
    await moverAz(37,600,0.5,0, 0, 2000,0.9) #Sai da zona
    await giroAz(-470,0.55, 0.000002)
    await moverAz(33,600,0.4,0, -470, 3000,0.5)
    motor.run_for_degrees(port.A,300,-900)
    await moverAz(30, 500, 0.35,0, -470, 2000, 0.9)
    await motorindA(300, 1000)
    #await giroAz(-530, 0.45, 0.000002)
    await moverAz(34, -500, 0, 0, -470, 5000, 0.7)
    await giroAz(-900, 0.4, 0.00002)
    await moverAz(14, 200, 0.2, 0, -900, 2000, 0.7)
    await motor.run_for_degrees(port.B,300,900)

    await motor_pair.move_for_degrees(motor_pair.PAIR_1,460,0,velocity=-300)
    await giroAz(-380, 0.45, 0.000002)
    await moverAz(70, -1000, 0, 0, -380, 10000, 0.7)


async def start3(): #trident
    await moverAz(50, 600, 0.3, 0, 0, 1000,0.7)#52
    #await time(1)
    await giroAz(500, 1, 0.000002)#500
    await moverAz(20, 500, 0, 0, 500, 2000,0.9)
    await motor.run_for_degrees(port.B, 400, -500)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1, 500, 0, velocity=-100)
    #await motor.run_for_degrees(port.B, 900, -500)
    """await motor_pair.move_for_degrees(motor_pair.PAIR_1, 100, 0, velocity=-300)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1, 170, 0, velocity=-300)"""
    await giroAz(0, 1, 0.000002)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1, 1850, 0, velocity=-1200)



async def start4(): #travessia
    await moverAz(94, 700, 0.9, 0, 0, 500,0.5)
    await motorindA(800, -900)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1, 400, 0, velocity=-400)
    await motorindA(700, 1000)
    motor.run_for_degrees(port.B, 400, -1000)
    #await time(0.1)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1, 1300, 0, velocity=-1110)


async def startbaseaz():
    await moverAz(135, -1110, -0.3, 0, 0, 10000, 0)
    motor.run_for_degrees(port.B, 400, 1000)
    await giroAz(-590, 0.7, 0.000002)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1, 580, 0, velocity=500)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1, 1000, 0, velocity=-1100)
    '''await moverAz(20, -400, 0, -450, 2000, 0.5)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1, 450, 0, velocity=1110)'''

async def start5(): #banana
    await moverAz(38,500,0,0, 0, 2000,0.75)#sai da base
    await giroAz(-475,0.7, 0.000002)#vira pro barco
    await moverAz(4.5,200,0, 0, -475, 2000,0)#levanta relativamente
    await motorindB(1450,900)#gira o barco
    await motor_pair.move_for_degrees(motor_pair.PAIR_1, 205, 0, velocity=-250)
    #await moverAz(10,-200,0, 0,-475,800,0)
    #await giroAz(-160,0.75, 0.00002)#vai em direção as coletas e amostras
    motor.run_for_degrees(port.B, 800, -900)
    await giroAz(-160, 0.7, 0.000002)
    await moverAz(28.1,550,0.35, 0, -160, 2000,0.7)#avança
    await motorindB(1150,1000)
    await motorindA(700, 1000)
    #await moverAz(10,-600,0.35,-180,2000,0.35)
    await motor_pair.move_tank_for_degrees(motor_pair.PAIR_1,-1700, 1050,850)

async def starttri():
    await moverAz(77, 900, 0, 0, 0, 2000, 0)
    await giroAz(-410, 0.65, 0.00001)
    await moverAz(6, 800, 0, 0.0002, -410, 2000, 0.7)
    await motor.run_for_degrees(port.B,-100,2000)
    await time(0.2)
    await motor.run_for_degrees(port.B,1100,2000)
    await moverAz(9, -400, 0, 0, -450, 2000, 0.7)
    await giroAz(0, 0.7, 0)
    await motor_pair.move_tank_for_degrees(motor_pair.PAIR_1,-1900, 900,1050)

async def start6(): #sonar
    await moverAz (36, 600,0, 0, 0, 2000,0.9)#sai da base

    await giroAz(400,0.7,0)#vira em direção ao sonar
    await moverAz(46,700,0,0,400, 2000,0.9)#anda em direção ao sonar
    await motorindB(1800,900)#gira o motor B e faz o sonarn
    await moverAz(55,-900,0, 0, 390, 10000,0.9)#anda em direção ao sonar

    await motor_pair.move_tank_for_degrees(motor_pair.PAIR_1, -1550, 900, 1050)

async def start7():
    await moverAz(70, 500,0, 0, 0, 2000,0)
    await giroAz(-390, 0.5, 0.000002)
    #await motor_pair.move_for_degrees(motor_pair.PAIR_1, 180, 0, velocity=100)
    await moverAz(17, 100, 0, 0, -400, 5000, 0)
    await motorindB(150, -900)
    await time(0.5)


    await motor_pair.move_for_degrees(motor_pair.PAIR_1, 240, 0, velocity=-500)
    await giroAz(-900, 0.6, 0.000002)


    await moverAz(36, -600, 0,0 , -900,6000,0)#40
    await giroAz(-1200, 0.6, 0.000002)
    await moverAz(16, -400, 0,0 , -1350,2000,0.9) #vai em direcao a compartilhada
    await motorindA(1000,-900)
    await moverAz(11, 400, 0,0, -1350, 2000,0.9) #sai da compartilhada
    await giroAz(-700, 0.6, 0.0000015)
    await moverAz(45, -600, 0,0, -700, 2000,0.9)#anda em direção ao peixe pescador
    await giroAz(-900, 0.6, 0.000002)
    await moverAz(7, 600, 0,0, -900, 2000,1)#deixa o polvo



starts = [start5, startini, start1, start2, start3,start4,startbaseaz,start7]
indice_atual = 3

async def statemachine():
    global indice_atual
    while True:
            if button.pressed(button.RIGHT) or button.pressed(button.LEFT):
                motion_sensor.reset_yaw(0)
                if indice_atual < len(starts):
                    await starts[indice_atual]()
                    indice_atual += 1

async def main():
    while indice_atual < len(starts):
        light_matrix.write(">")

        await statemachine()


runloop.run(main())
