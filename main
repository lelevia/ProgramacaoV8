from hub import port, motion_sensor, button, light_matrix
import motor
import motor_pair
import runloop

motor_pair.pair(motor_pair.PAIR_1, port.E, port.F)


def conversao (cm):
    y = (360*cm)/17.5
    return y



'''async def giro (angulo, kp):
    if angulo>0:
        while abs(angulo)>=abs(motion_sensor.tilt_angles()[0]):
            erro = angulo - motion_sensor.tilt_angles()[0]
            correcao = erro*kp
            motor_pair.move_tank(motor_pair.PAIR_1, round(correcao*-1), round(correcao))
    else:
        while abs(angulo)>=abs(motion_sensor.tilt_angles()[0]):
            erro = abs(angulo) - abs(motion_sensor.tilt_angles()[0])
            correcao = erro*kp
            motor_pair.move_tank(motor_pair.PAIR_1, round(correcao), round(correcao*-1))
        motor_pair.stop(motor_pair.PAIR_1)'''


async def giroAz(angulo, kp):
    # Recupera o valor atual do sensor de giroscópio em decigraus
    angulo_atual = motion_sensor.tilt_angles()[0]

    # Função para ajustar o ângulo para o intervalo [-1790, 1790]
    def ajustar_angulo(angulo):
        # Corrige o valor do ângulo para estar sempre dentro do intervalo [-1790, 1790]
        if angulo > 1790:
            angulo -= 3580# Se ultrapassar 1790, retorna para o intervalo negativo
        elif angulo < -1790:
            angulo += 3580# Se ultrapassar -1790, retorna para o intervalo positivo
        return angulo

    # Ajusta os ângulos de destino para o intervalo [-1790, 1790]
    angulo_desejado = ajustar_angulo(angulo)
    angulo_atual = ajustar_angulo(angulo_atual)

    # Determina a direção de rotação (sentido horário ou anti-horário)
    while abs(angulo_desejado - angulo_atual) > 0:# Um valor pequeno para precisão
        erro = angulo_desejado - angulo_atual
        correcao = erro * kp
        motor_pair.move_tank(motor_pair.PAIR_1, round(correcao * -1), round(correcao))
        angulo_atual = ajustar_angulo(motion_sensor.tilt_angles()[0])# Atualiza o ângulo atual

    motor_pair.stop(motor_pair.PAIR_1)



async def moverAz(distancia,velocidade, kp, referencia, aceleracao):
    def conversor(distancia):
        graus_motor=(distancia*360)/17.5
        return graus_motor

    motor.reset_relative_position(port.E,0)
    distancia_total = conversor(distancia)

    def ajustar_angulo(angulo):
        # Corrige o valor do ângulo para estar sempre dentro do intervalo [-1790, 1790]
        if angulo > 1790:
            angulo -= 3580# Se ultrapassar 1790, retorna para o intervalo negativo
        elif angulo < -1790:
            angulo += 3580# Se ultrapassar -1790, retorna para o intervalo positivo
        return angulo

    angulo_atual = ajustar_angulo(motion_sensor.tilt_angles()[0])
    erro_angulo = referencia-angulo_atual

    print (erro_angulo)

    if abs(erro_angulo)>10:
        await giroAz(referencia, 0.5)
        while distancia_total>abs(motor.relative_position(port.E)):
            erro = referencia - motion_sensor.tilt_angles()[0]
            correcao = erro * kp
            motor_pair.move(motor_pair.PAIR_1, round(correcao*-1), velocity=velocidade, acceleration=aceleracao)
        motor_pair.stop(motor_pair.PAIR_1)

    else:
        while distancia_total>abs(motor.relative_position(port.E)):
            erro = referencia - motion_sensor.tilt_angles()[0]
            correcao = erro * kp
            motor_pair.move(motor_pair.PAIR_1, round(correcao*-1), velocity=velocidade, acceleration=aceleracao)
        motor_pair.stop(motor_pair.PAIR_1)
    

async def motorindA(angulo, velocidade):
    motor.reset_relative_position(port.A, 0)
    while abs(motor.relative_position(port.A))<abs(angulo):
        motor.run(port.A, velocidade)
    motor.stop(port.A)

async def motorindB(angulo, velocidade):
    motor.reset_relative_position(port.B, 0)
    while abs(motor.relative_position(port.B))<abs(angulo):
        motor.run(port.B, velocidade)
    motor.stop(port.B)

async def time (tempo):
    i = 0
    for i in range (tempo+1):
        await runloop.sleep_ms(1000)

async def start1():
    await moverAz(53, 650, 0.4, 0, 2000) #sai da base em direção ao berçario
    motor.run_for_degrees(port.B, 970, 700) #levanta o berçario
    await time(0.2) #da um intervalo
    await motor.run_for_degrees(port.B,200,-600) #baixa a cremalheira
    await motorindA(1200, 1080) #pega o mergulhador e faz a parte de baixo
    await time(0.2) #da um intervalo
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,200,0,velocity=-100)
    #await moverAz(9, -200, 0.4, 0, 5000) #sai da missão
    await giroAz(-460, 0.6) #faz uma curva e coleta as amostras
    await moverAz(53, -1100, 0.4, -460, 5000) #volta pra base'''

async def start2(): #kraken
    await moverAz(35,500,0.3, 0, 5000) #Sai da zona
    await giroAz(-300,0.6) #faz curva de ajuste
    await moverAz(20,400,0.3, -300, 5000) #Andar pra frente
    await giroAz(-900, 0.6) #faz outra curva
    await moverAz(22,200,0.35, -900, 5000) #Pega o baú e levanta o mastro
    await motor_pair.move_for_degrees(motor_pair.PAIR_1,450,0,velocity=-200)
    #await moverAz(17,-300,0.35, 0, 5000) #Sai com o baú
    await giroAz(-505, 0.35) #vira na reta da coleta
    await motor.run_for_degrees(port.B, 1100, -1000) #baixa a garra em mov
    await moverAz(10, 400, 0.35, -505, 5000) #anda reto
    motor.run_for_degrees(port.A,-300,900)
    await moverAz(23.5,400,0.35, -505, 5000)
    await moverAz(10, 350, 0.35, -505, 5000) #anda reto
    await motorindB(600, 1100) #levanta a garra
    await motorindA(300, 700) #recolhe o braço
    await motor_pair.move_tank_for_degrees(motor_pair.PAIR_1,2300,-1100,-1100) #volta pra base


async def start3(): #trident
    await moverAz(46, 400, 0.35, 0, 5000)
    await giroAz(500, 0.55)
    #await time(0.3)
    await moverAz(22, 400, 0.35, 500, 2000)
    motor.run_for_degrees(port.B, 700, -350)
    await time(0.4)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1, 450, 0, velocity=-100)
    #await moverAz(30, -90, 0.35, 500, 2000)
    await giroAz(0, 0.6)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1, 1700, 0, velocity=-1000)
    
    

async def start4(): #travessia
    await moverAz(45, 500, 0.3, 0, 2000)
    await motorindB(300, 500)
    await moverAz(45, 500, 0.3, 0, 2000)
    await motorindB(400, -500)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1, 450, 0, velocity=-400)
    #await moverAz(18, -500, 0.35, 0, 2000)
    await motorindB(400, 500)
    await motor_pair.move_for_degrees(motor_pair.PAIR_1, 900, 0, velocity=900)
    #await moverAz(45, 900, 0.35, 0, 2000)

    
    '''await giroAz(1490, 0.3)
    await motor_pair.move_tank_for_degrees(motor_pair.PAIR_1, -1100, 900, 1000)
    await moverAz(35, -400, 0.35, 1490, 2000)'''


async def start5(): #banana
    await moverAz(39,500,0.35, 0, 2000)#sai da base
    #await moverAz(11,-400,0.35, 0, 2000)#retira o coral
    await giroAz(-475,0.5)#vira pro barco
    await moverAz(4.5,100,0.4, -475, 2000)#levanta relativamente
    await motorindB(1600,800)#gira o barco
    await moverAz(10,-200,0.3,-475,800)
    await giroAz(-180,0.33)#vai em direção as coletas e amostras
    await time(0.2)
    motor.run_for_degrees(port.B, 800, -800)
    await moverAz(28,500,0.35, -180, 2000)#avança
    await motorindB(800,800)
    await motorindA(900, 400)
    await moverAz(10,-500,0.3,-180,2000)
    await time(0.2)
    await motor_pair.move_tank_for_degrees(motor_pair.PAIR_1,-1300, 1050,750)
    #await moverAz(50, -400, 0.30, 0, 900)


async def start6(): #sonar
    await moverAz (30, 500,0.4, 0, 2000)#sai da base
    await giroAz(390,0.35)#vira em direção ao sonar
    await moverAz(56.5,700,0.35, 390, 2000)#anda em direção ao sonar
    await motorindB(2000,800)#gira o motor B e faz o sonar
    await time(0.3)
    await moverAz(70,-1000,0, 390, 2000)#volta sentido criatura desconhecida
    
async def start7():
    await moverAz(60, 400,0.4, 0, 2000)#sai da base
    await giroAz(-410, 0.40)
    await moverAz(12.5, 150, 0.5,-410,2000)
    await time(0.5)
    await motor_pair.move_tank_for_degrees(motor_pair.PAIR_1,-400, 500,500)
    await moverAz(55, -500, 0, -900,2000)
    await moverAz(9, 400, 0, -550, 2000)
    #await motor_pair.move_for_degrees(motor_pair.PAIR_1, 150, 0, velocity=400)
    await giroAz(-1300, 0.35)
    #await time(0.35)
    await moverAz(10, -100, 0, -1300,2000)
    await motorindB(1200,800)
    await moverAz(9, 400, 0.35, -1300, 2000)
    await moverAz(48, -400, 0, -720, 2000)
    await moverAz(11.5, 400, 0, -900, 2000)


    



    '''await curva(-430,0.4,0)#faz uma curva na baleia
    await mover(8,-120,1)#bate na parte de baixo da baleia e entrega os krills
    await time(0.7)#da um intervalo
    await mover(7.5,250,1)#sai da baleia
    await curva(-220,0.4,0)#faz uma curva perto da m14
    await mover(3.5,200,1)#sai da linha da coleta(m14)
    await curva(-300,0.4,0)#completa a curva
    await motorindA(50,100)#abaixa a cremaleira
    await mover(48,450,1)#vai na missão compartilhada'''



starts = [start1, start2, start3,start4,start5,start6,start7]
indice_atual = 3

async def mudar():
    global indice_atual
    while True:
            if button.pressed(button.RIGHT) or button.pressed(button.LEFT):
                motion_sensor.reset_yaw(0)
                if indice_atual < len(starts):
                    await starts[indice_atual]()
                    indice_atual += 1
                    await time(3)

async def main():
    while indice_atual < len(starts):
        light_matrix.write(">")

        await mudar()
        await time(3)
    
    '''await moverAz(50, 600, 0.35, 0, 100)
    await mover(40, 200, 1)'''
    #await curvaD(-900, 0.5, 0.02)
runloop.run(main())

